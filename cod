#include <iostream>
#include <math.h>
#include <string.h>
#include <vector>
using namespace std;


class Car
{       
    private://creating private variables
    string c_manufacturer;
        string c_model;
        int c_id;
        int c_speed;
        int c_lat, c_lon;
        vector<int> store_id;
        vector<string> store_man;
        vector<string> store_model;
        vector<int> store_speed;
        vector<int> store_lat;
        vector<int> store_lon;
        
public://creating setters and getters
    void setStored_id(int id)
    {
        store_id.push_back(id);
    }
    vector<int>& getStored_id() {
            return  store_id;
        }
    void setStored_man(string man)
    {
        store_man.push_back(man);
    }
     vector<string>& getStored_man() {
            return  store_man;
        }
    void setStored_model(string model)
    {
        store_model.push_back(model);
    }
     vector<string>& getStored_model() {
            return  store_model;
        }
    void setStored_speed(int speed)
    {
        store_speed.push_back(speed);
    }
     vector<int>& getStored_speed() {
            return  store_speed;
        }
    void setStored_lat(int lat)
    {
        store_lat.push_back(lat);
    }
     vector<int>& getStored_lat() {
            return  store_lat;
        }
    void setStored_lon(int lon)
    {
        store_lon.push_back(lon);
    }
     vector<int>& getStored_lon() {
            return  store_lon;
        }
        
    string *getManufacturer()
    {
        return &c_manufacturer;
    }

    void setManufacturer(string manufacturer)
    {
         c_manufacturer=manufacturer;
    }

    string *getModel()
    {
        return &c_model;
    }

    void setModel(string model)
    {
         c_model = model;
    }

    int *getID()
    {
        return &c_id;
    }

    void setID(int id)
    {
         c_id = id;
    }

    int *getSpeed()
    {
        return &c_speed;
    }

    void setSpeed(int speed)
    {
         c_speed = speed;
    }

    int *getLatitude()
    {
        return &c_lat;
    }

    void setLatitude(int latitude)
    {
         c_lat = latitude;
    }

    int *getLongitude()
    {
        return &c_lon;
    }

    void setLongitude(int longitude)
    {
         c_lon = longitude;
    }
    
    
int Distance(int x1, int x2, int y1, int y2)//calculating the distance between the points
{
    return sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2));
}
 

};
//testing purpose
void print(vector<string> const &input)
{
    for (auto const &i: input) {
        cout << i << " \n";
    }
}

int main() 
{
  int min_d,current_min;
  int *flag_car;

  Car car1;
 
  car1.setManufacturer("Tesla");
  car1.setModel("SE");
  car1.setID(1);
  car1.setSpeed(22);
  car1.setLongitude(12);
  car1.setLatitude(22);

  Car obj[10];
  obj[0].setManufacturer("Mercedes");
  obj[0].setModel("E");
  obj[0].setID(2);
  obj[0].setSpeed(24);
  obj[0].setLongitude(1000);
  obj[0].setLatitude(2200);
  
  obj[1].setManufacturer("BMW");
  obj[1].setModel("X6");
  obj[1].setID(3);
  obj[1].setSpeed(23);
  obj[1].setLongitude(10);
  obj[1].setLatitude(20);
 
  for(int i=0; i<=1; i++)
  {
      //storing data from other cars in car1
      car1.setStored_id(*obj[i].getID());
      car1.setStored_man(*obj[i].getManufacturer());
      car1.setStored_model(*obj[i].getModel());
      car1.setStored_speed(*obj[i].getSpeed());
      car1.setStored_lon(*obj[i].getLongitude());
      car1.setStored_lat(*obj[i].getLatitude());
      //seeing which car is closer to the main car
      current_min = car1.Distance(*car1.getLatitude(),*obj[i].getLatitude(),*car1.getLongitude(),*obj[i].getLongitude());
    if(current_min<min_d)
    {
        min_d=current_min;
        flag_car=obj[i].getID();
    }
  }
  //print(car1.getStored_model());//testing purpose
  cout<<"Closest car is "<<*flag_car;
  
}
